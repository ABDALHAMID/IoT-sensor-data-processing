

services:

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d  # Database initialization scripts
    environment:
      POSTGRES_DB: ${POSTGRES_DB}  # Add these to your .env file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    
  nifi:
    image: apache/nifi:1.23.2
    container_name: nifi
    ports:
      - "8080:8080"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_WEB_HTTP_HOST=0.0.0.0
      - NIFI_SENSITIVE_PROPS_KEY=your_secure_key_here  # ðŸ‘ˆ Add this
      - NIFI_SENSITIVE_PROPS_ALGORITHM=NIFI_PBKDF2_AES_GCM_256  # ðŸ‘ˆ Add this
    volumes:
      - nifi_flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi_content:/opt/nifi/nifi-current/content_repository
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped



  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: kafka-producer-api
    depends_on:
      - kafka
    restart: on-failure
    env_file: ./.env  # Load env vars into the container
    volumes:
      - ./api:/app  # Optional: allow live-editing code
    command: ["python", "producer.py"]

  simulator:
    build: ./api-simulator
    container_name: external-api-simulator
    ports:
      - "5001:5001"
    restart: on-failure

  # ml-trainer:
  #   build: ./ml
  #   container_name: ml-trainer
  #   depends_on:
  #     - postgres
  #   env_file:
  #     - .env


volumes:
  pgdata:
  nifi_flowfile:
  nifi_content: